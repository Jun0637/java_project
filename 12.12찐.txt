import java.io.IOException;
import java.util.Map;

public interface DataReader {
    Map<String, Map<String, Integer>> readData(String filePath) throws IOException;
}
-----------------------
import java.io.IOException;
import java.util.Map;

public interface DataWriter {
    void writeData(String outputPath, Map<String, Map<String, Integer>> summaryMap) throws IOException;
}
--------------------------
package VO;

import java.time.format.DateTimeFormatter;

public class PurchaseRecord {
    // PurchaseRecord 클래스 내용을 추가해야 합니다.
}
--------------------------
package CSV;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import VO.PurchaseRecord;

public class CSVDataReader implements DataReader {
    // CSVDataReader 클래스 내용을 추가해야 합니다.
}

public class CSVDataWriter implements DataWriter {
    // CSVDataWriter 클래스 내용을 추가해야 합니다.
}
------------------------
package TSV;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import VO.PurchaseRecord;

public class TSVDataReader implements DataReader {
    // TSVDataReader 클래스 내용을 추가해야 합니다.
}

public class TSVDataWriter implements DataWriter {
    // TSVDataWriter 클래스 내용을 추가해야 합니다.
}
-------------------------
package Main;

import CSV.CSVDataReader;
import CSV.CSVDataWriter;
import TSV.TSVDataReader;
import TSV.TSVDataWriter;

import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Map;
import java.util.Scanner;

public class PurchaseSummary {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("입력 파일 경로를 입력하세요: ");
        String inputFilePath = scanner.nextLine();

        System.out.print("출력 파일 경로를 입력하세요: ");
        String outputFilePath = scanner.nextLine();

        System.out.print("문자 인코딩을 입력하세요: ");
        String encoding = scanner.nextLine();

        try {
            DataReader dataReader;
            DataWriter dataWriter;

            Path inputPath = Paths.get(inputFilePath);
            Path outputPath = Paths.get(outputFilePath);

            if (inputPath.getFileName().toString().toLowerCase().endsWith(".csv")) {
                dataReader = new CSVDataReader();
            } else if (inputPath.getFileName().toString().toLowerCase().endsWith(".tsv")) {
                dataReader = new TSVDataReader();
            } else {
                System.err.println("지원하지 않는 파일 형식입니다.");
                return;
            }

            if (outputPath.getFileName().toString().toLowerCase().endsWith(".csv")) {
                dataWriter = new CSVDataWriter();
            } else if (outputPath.getFileName().toString().toLowerCase().endsWith(".tsv")) {
                dataWriter = new TSVDataWriter();
            } else {
                System.err.println("지원하지 않는 파일 형식입니다.");
                return;
            }

            // 데이터 읽기
            Map<String, Map<String, Integer>> summaryMap = dataReader.readData(inputPath.toString());

            // 데이터 쓰기
            dataWriter.writeData(outputPath.toString(), summaryMap);

        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            scanner.close();
        }
    }
}
--------------------
-----------------
import java.io.IOException;
import java.util.Map;

public interface DataReader {
    Map<String, Map<String, Integer>> readData(String filePath, String encoding) throws IOException;
}
---------------------
import java.io.IOException;
import java.util.Map;

public interface DataWriter {
    void writeData(String outputPath, Map<String, Map<String, Integer>> summaryMap, String encoding) throws IOException;
}
--------------------
public class PurchaseSummary {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("입력 파일 경로를 입력하세요: ");
        String inputFilePath = scanner.nextLine();

        System.out.print("출력 파일 경로를 입력하세요: ");
        String outputFilePath = scanner.nextLine();

        System.out.print("문자 인코딩을 입력하세요: ");
        String encoding = scanner.nextLine();

        try {
            DataReader dataReader;
            DataWriter dataWriter;

            Path inputPath = Paths.get(inputFilePath);
            Path outputPath = Paths.get(outputFilePath);

            if (inputPath.getFileName().toString().toLowerCase().endsWith(".csv")) {
                dataReader = new CSVDataReader();
            } else if (inputPath.getFileName().toString().toLowerCase().endsWith(".tsv")) {
                dataReader = new TSVDataReader();
            } else {
                System.err.println("지원하지 않는 파일 형식입니다.");
                return;
            }

            if (outputPath.getFileName().toString().toLowerCase().endsWith(".csv")) {
                dataWriter = new CSVDataWriter();
            } else if (outputPath.getFileName().toString().toLowerCase().endsWith(".tsv")) {
                dataWriter = new TSVDataWriter();
            } else {
                System.err.println("지원하지 않는 파일 형식입니다.");
                return;
            }

            // 데이터 읽기
            Map<String, Map<String, Integer>> summaryMap = dataReader.readData(inputPath.toString(), encoding);

            // 데이터 쓰기
            dataWriter.writeData(outputPath.toString(), summaryMap, encoding);

        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            scanner.close();
        }
    }
}
----------------
package VO;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

public class PurchaseRecord {
    private LocalDate purchaseDate;
    private String category;
    private int totalPrice;

    public PurchaseRecord(String date, String category, int price) {
        this.purchaseDate = LocalDate.parse(date, DateTimeFormatter.ofPattern("yyyy/MM/dd"));
        this.category = category;
        this.totalPrice = price;
    }

    public LocalDate getPurchaseDate() {
        return purchaseDate;
    }

    public String getCategory() {
        return category;
    }

    public int getTotalPrice() {
        return totalPrice;
    }
}
-------------
-----------
package VO;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

public class PurchaseRecord {
    private LocalDate purchaseDate;
    private String category;
    private int totalPrice;

    public PurchaseRecord(String date, String category, int price) {
        this.purchaseDate = LocalDate.parse(date, DateTimeFormatter.ofPattern("yyyy/MM/dd"));
        this.category = category;
        this.totalPrice = price;
    }

    public LocalDate getPurchaseDate() {
        return purchaseDate;
    }

    public String getCategory() {
        return category;
    }

    public int getTotalPrice() {
        return totalPrice;
    }
}
-----------
-----------
-----------
// CSVDataReader.java
package CSV;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.time.format.DateTimeFormatter;

import VO.PurchaseRecord;

public class CSVDataReader implements DataReader {
    @Override
    public Map<String, Map<String, Integer>> readData(String filePath, String encoding) throws IOException {
        Map<String, Map<String, Integer>> summaryMap = new HashMap<>();

        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            reader.lines()
                .skip(1) // 헤더 행 건너뛰기
                .map(line -> line.split(","))
                .filter(tokens -> tokens.length == 5)
                .map(tokens -> {
                    try {
                        return new PurchaseRecord(tokens[0], tokens[2], Integer.parseInt(tokens[3]));
                    } catch (NumberFormatException e) {
                        System.err.println("CSV 파일에서 정수를 파싱하는 중 오류 발생: " + e.getMessage());
                        return null;
                    }
                })
                .forEach(record -> processPurchaseRecord(record, summaryMap));
        }

        return summaryMap;
    }

    private void processPurchaseRecord(PurchaseRecord record, Map<String, Map<String, Integer>> summaryMap) {
        if (record != null) {
            String monthYear = record.getPurchaseDate().format(DateTimeFormatter.ofPattern("yyyy/MM"));
            summaryMap.computeIfAbsent(monthYear, k -> new HashMap<>())
                .merge(record.getCategory(), record.getTotalPrice(), Integer::sum);
        }
    }
}

// CSVDataWriter.java
package CSV;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Map;

public class CSVDataWriter implements DataWriter {
    @Override
    public void writeData(String outputPath, Map<String, Map<String, Integer>> summaryMap, String encoding) throws IOException {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(outputPath))) {
            writer.write("購入月,分類,総額\n");

            summaryMap.forEach((monthYear, categoryMap) ->
                categoryMap.forEach((category, totalAmount) -> {
                    try {
                        writer.write(monthYear + "," + category + "," + totalAmount + "\n");
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                })
            );
        }
    }
}
